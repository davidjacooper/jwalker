plugins {
    id 'java-library'
    id 'groovy'
    id 'pmd'
    id 'maven-publish'
    id 'signing'
}

group = 'au.djac'
version = '0.1'

repositories {
    mavenCentral()
}

dependencies {
    // SLF4J for logging
    implementation 'org.slf4j:slf4j-api:2.0.16'
    testImplementation 'ch.qos.logback:logback-classic:1.5.7'

    // Apache Commons Compress, for recursing into .zip, .tar, etc. files.
    implementation 'org.apache.commons:commons-compress:1.24.0'
    implementation 'com.github.luben:zstd-jni:1.5.5-6' // For Zstandard compression
    implementation 'org.tukaani:xz:1.9'   // For LZMA (.xz, .txz)
    implementation 'org.brotli:dec:0.1.2' // For Brotli compression (.br)

    // Needed for IOUtils and FileUtils.
    implementation 'commons-io:commons-io:2.16.1'

    // Testing with Spock
    testImplementation 'org.codehaus.groovy:groovy:3.0.15'
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

base {
    archivesName = rootProject.name
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all,-serial"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

pmd {
    consoleOutput = true
    toolVersion = '7.4.0'
    rulesMinimumPriority = 5
    ruleSetFiles = files('../pmd-ruleset.xml')
}

tasks.named("jar") {
    manifest {
        attributes(
            'Implementation-Title': rootProject.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'David J A Cooper',
            'Specification-Title': rootProject.name,
            'Specification-Version': project.version,
            'Specification-Vendor': 'David J A Cooper'
        )
    }
}

tasks.withType(Javadoc) {
    options {
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    }
}

publishing {
    publications {
        JWalkerLibrary(MavenPublication) {
            artifactId = 'jwalker'
            from components.java

            pom {
                name = 'JWalker'
                description = 'A library for traversing directory trees, while transparently recursing into archives'
                url = 'https://github.com/davidjacooper/jwalker'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'djac'
                        name = 'David J A Cooper'
                        email = 'david.cooper+jwalker@djac.au'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/davidjacooper/jwalker.git'
                    developerConnection = 'scm:git:ssh://github.com/davidjacooper/jwalker.git'
                    url = 'https://github.com/davidjacooper/jwalker'
                }
            }
        }
    }

    repositories {
//         maven {
//             name = 'localRepo'
//             url = layout.buildDirectory.dir('repo')
//         }
        maven {
            name = 'GitHubPackages'
            url = 'https://maven.pkg.github.com/davidjacooper/jwalker'
            credentials {
                username = System.getenv('GITHUB_USERNAME')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.JWalkerLibrary
}
